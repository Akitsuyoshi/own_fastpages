{
  
    
        "post0": {
            "title": "Fastpages Notebook Example Post",
            "content": "Project: Finding Lane Lines on the Road . In this project, you will use the tools you learned about in the lesson to identify lane lines on the road. You can develop your pipeline on a series of individual images, and later apply the result to a video stream (really just a series of images). Check out the video clip &quot;raw-lines-example.mp4&quot; (also contained in this repository) to see what the output should look like after using the helper functions below. . Once you have a result that looks roughly like &quot;raw-lines-example.mp4&quot;, you&#39;ll need to get creative and try to average and/or extrapolate the line segments you&#39;ve detected to map out the full extent of the lane lines. You can see an example of the result you&#39;re going for in the video &quot;P1_example.mp4&quot;. Ultimately, you would like to draw just one line for the left side of the lane, and one for the right. . In addition to implementing code, there is a brief writeup to complete. The writeup should be completed in a separate file, which can be either a markdown file or a pdf document. There is a write up template that can be used to guide the writing process. Completing both the code in the Ipython notebook and the writeup template will cover all of the rubric points for this project. . . Let&#39;s have a look at our first image called &#39;test_images/solidWhiteRight.jpg&#39;. Run the 2 cells below (hit Shift-Enter or the &quot;play&quot; button above) to display the image. . Note: If, at any point, you encounter frozen display windows or other confounding issues, you can always start again with a clean slate by going to the &quot;Kernel&quot; menu above and selecting &quot;Restart &amp; Clear Output&quot;. . . The tools you have are color selection, region of interest selection, grayscaling, Gaussian smoothing, Canny Edge Detection and Hough Tranform line detection. You are also free to explore and try other techniques that were not presented in the lesson. Your goal is piece together a pipeline to detect the line segments in the image, then average/extrapolate them and draw them onto the image for display (as below). Once you have a working pipeline, try it out on the video stream below. . . . Your output should look something like this (above) after detecting line segments using the helper functions below . . . Your goal is to connect/average/extrapolate line segments to get output like this . Run the cell below to import some packages. If you get an import error for a package you&#39;ve already installed, try changing your kernel (select the Kernel menu above --&gt; Change Kernel). Still have problems? Try relaunching Jupyter Notebook from the terminal prompt. Also, consult the forums for more troubleshooting tips. . Import Packages . import matplotlib.pyplot as plt import matplotlib.image as mpimg import numpy as np import cv2 %matplotlib inline . Read in an Image . image = mpimg.imread(&#39;test_images/solidWhiteRight.jpg&#39;) #printing out some stats and plotting print(&#39;This image is:&#39;, type(image), &#39;with dimensions:&#39;, image.shape) plt.imshow(image) # if you wanted to show a single color channel image called &#39;gray&#39;, for example, call as plt.imshow(gray, cmap=&#39;gray&#39;) . This image is: &lt;class &#39;numpy.ndarray&#39;&gt; with dimensions: (540, 960, 3) . &lt;matplotlib.image.AxesImage at 0x7ff082ffb668&gt; . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Ideas for Lane Detection Pipeline . Some OpenCV functions (beyond those introduced in the lesson) that might be useful for this project are: . cv2.inRange() for color selection cv2.fillPoly() for regions selection cv2.line() to draw lines on an image given endpoints cv2.addWeighted() to coadd / overlay two images cv2.cvtColor() to grayscale or change color cv2.imwrite() to output images to file cv2.bitwise_and() to apply a mask to an image . Check out the OpenCV documentation to learn about these and discover even more awesome functionality! . Helper Functions . Below are some helper functions to help get you started. They should look familiar from the lesson! . import math def grayscale(img): &quot;&quot;&quot;Applies the Grayscale transform This will return an image with only one color channel but NOTE: to see the returned image as grayscale (assuming your grayscaled image is called &#39;gray&#39;) you should call plt.imshow(gray, cmap=&#39;gray&#39;)&quot;&quot;&quot; return cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) # Or use BGR2GRAY if you read an image with cv2.imread() # return cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) def canny(img, low_threshold, high_threshold): &quot;&quot;&quot;Applies the Canny transform&quot;&quot;&quot; return cv2.Canny(img, low_threshold, high_threshold) def gaussian_blur(img, kernel_size): &quot;&quot;&quot;Applies a Gaussian Noise kernel&quot;&quot;&quot; return cv2.GaussianBlur(img, (kernel_size, kernel_size), 0) def region_of_interest(img, vertices): &quot;&quot;&quot; Applies an image mask. Only keeps the region of the image defined by the polygon formed from `vertices`. The rest of the image is set to black. `vertices` should be a numpy array of integer points. &quot;&quot;&quot; #defining a blank mask to start with mask = np.zeros_like(img) #defining a 3 channel or 1 channel color to fill the mask with depending on the input image if len(img.shape) &gt; 2: channel_count = img.shape[2] # i.e. 3 or 4 depending on your image ignore_mask_color = (255,) * channel_count else: ignore_mask_color = 255 #filling pixels inside the polygon defined by &quot;vertices&quot; with the fill color cv2.fillPoly(mask, vertices, ignore_mask_color) #returning the image only where mask pixels are nonzero masked_image = cv2.bitwise_and(img, mask) return masked_image def draw_lines(img, lines, color=[255, 0, 0], thickness=3): &quot;&quot;&quot; NOTE: this is the function you might want to use as a starting point once you want to average/extrapolate the line segments you detect to map out the full extent of the lane (going from the result shown in raw-lines-example.mp4 to that shown in P1_example.mp4). Think about things like separating line segments by their slope ((y2-y1)/(x2-x1)) to decide which segments are part of the left line vs. the right line. Then, you can average the position of each of the lines and extrapolate to the top and bottom of the lane. This function draws `lines` with `color` and `thickness`. Lines are drawn on the image inplace (mutates the image). If you want to make the lines semi-transparent, think about combining this function with the weighted_img() function below &quot;&quot;&quot; if lines is None: return left_line_x = [] left_line_y = [] right_line_x = [] right_line_y = [] lr_lines = [[left_line_x, left_line_y], [right_line_x, right_line_y]] for line in lines: for x1,y1,x2,y2 in line: slope = (y2 - y1) / (x2 - x1) if abs(slope) &lt; 0.3: continue # Store each line points elif (slope &lt; 0): left_line_x += [x1, x2] left_line_y += [y1, y2] else: right_line_x += [x1, x2] right_line_y += [y1, y2] for line in lr_lines: x = line[0] y = line[1] if (len(x) == 0 or len(y) == 0): continue # Line can be represented as y = mx + b # Z returns list, [m, b] z = np.polyfit(x, y, 1) f = np.poly1d(z) if (z[0] &gt; 0): # Draw right line cv2.line(img, (min(x), f(min(x)).astype(int)), (img.shape[1], f(img.shape[1]).astype(int)), color, thickness) else: # Draw left line cv2.line(img, (0, f(0).astype(int)), (max(x), f(max(x)).astype(int)), color, thickness) def hough_lines(img, rho, theta, threshold, min_line_len, max_line_gap): &quot;&quot;&quot; `img` should be the output of a Canny transform. Returns an image with hough lines drawn. &quot;&quot;&quot; lines = cv2.HoughLinesP(img, rho, theta, threshold, np.array([]), minLineLength=min_line_len, maxLineGap=max_line_gap) line_img = np.zeros((img.shape[0], img.shape[1], 3), dtype=np.uint8) draw_lines(line_img, lines) return line_img # Python 3 has support for cool math symbols. def weighted_img(img, initial_img, α=0.8, β=1., γ=0.): &quot;&quot;&quot; `img` is the output of the hough_lines(), An image with lines drawn on it. Should be a blank image (all black) with lines drawn on it. `initial_img` should be the image before any processing. The result image is computed as follows: initial_img * α + img * β + γ NOTE: initial_img and img must be the same shape! &quot;&quot;&quot; return cv2.addWeighted(initial_img, α, img, β, γ) . Test Images . Build your pipeline to work on the images in the directory &quot;test_images&quot; You should make sure your pipeline works well on these images before you try the videos. . import os os.listdir(&quot;test_images/&quot;) . [&#39;solidWhiteCurve.jpg&#39;, &#39;solidWhiteRight.jpg&#39;, &#39;solidYellowCurve.jpg&#39;, &#39;solidYellowCurve2.jpg&#39;, &#39;solidYellowLeft.jpg&#39;, &#39;whiteCarLaneSwitch.jpg&#39;] . img = mpimg.imread(&#39;test_images/solidYellowCurve.jpg&#39;) plt.imshow(img) . &lt;matplotlib.image.AxesImage at 0x7ff04c31f4e0&gt; . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Build a Lane Finding Pipeline . Build the pipeline and run your solution on all test_images. Make copies into the test_images_output directory, and you can use the images in your writeup report. . Try tuning the various parameters, especially the low and high Canny thresholds as well as the Hough lines parameters. . # then save them to the test_images_output directory. . def lane_finding_pipeline(rgb_img): &quot;&quot;&quot; Input: RGB image Return: edge image with red line &quot;&quot;&quot; # Convert image to gray scale gray = grayscale(rgb_img) # Define a kernel size and apply Gaussian smoothing kernel = 3 # Must be odd and greater than 1 blur_gray = gaussian_blur(gray, kernel) # Apply Canny edge detection # Note for myself: a reasonable range for your threshold parameters would be in the tens to hundreds high_threshold = 255 low_threshold = high_threshold / 3 edges = canny(blur_gray, high_threshold, low_threshold) # Define a four sided polygon to mask imshape = rgb_img.shape vertices = np.array([[(100,imshape[0]),(460, 310), (500, 310), (imshape[1]-100,imshape[0])]], dtype=np.int32) # Mask perticular area(vertics) in edge image masked_edges = region_of_interest(edges, vertices) # Define the Hough transform parameters # rho is distance resolution in pixel # theta is angular resolution in radians (pi/180) # threshold number is that of intersections in hough grid rho = 1 theta = np.pi/180 threshold = 40 min_line_length = 20 max_line_gap = 120 line_img = hough_lines(masked_edges, rho, theta, threshold, min_line_length, max_line_gap) return weighted_img(line_img, rgb_img) . # plt.imshow(lane_finding_pipeline(image)) img = lane_finding_pipeline(image) plt.imshow(img) . &lt;matplotlib.image.AxesImage at 0x7ff04c28b630&gt; . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; # import glob # jpg_file_list = glob.glob(&#39;./examples/*.jpg&#39;) # for img_name in jpg_file_list: # img = cv2.imread(img_name) # res = cv2.resize(img, dsize=(250, 145), interpolation=cv2.INTER_LINEAR) # cv2.imwrite(img_name, res) . for img_name in os.listdir(&quot;test_images/&quot;): img = mpimg.imread(&#39;test_images/&#39; + img_name) img = lane_finding_pipeline(img) mpimg.imsave(&#39;test_images_output/&#39; + img_name, img) . Test on Videos . You know what&#39;s cooler than drawing lanes over images? Drawing lanes over video! . We can test our solution on two provided videos: . solidWhiteRight.mp4 . solidYellowLeft.mp4 . Note: if you get an import error when you run the next cell, try changing your kernel (select the Kernel menu above --&gt; Change Kernel). Still have problems? Try relaunching Jupyter Notebook from the terminal prompt. Also, consult the forums for more troubleshooting tips. . If you get an error that looks like this: . NeedDownloadError: Need ffmpeg exe. You can download it by calling: imageio.plugins.ffmpeg.download() . Follow the instructions in the error message and check out this forum post for more troubleshooting tips across operating systems. . from moviepy.editor import VideoFileClip from IPython.display import HTML . Imageio: &#39;ffmpeg.linux64&#39; was not found on your computer; downloading it now. Try 1. Download from https://github.com/imageio/imageio-binaries/raw/master/ffmpeg/ffmpeg.linux64 (27.2 MB) Downloading: 8192/28549024 bytes (0.0671744/28549024 bytes (2.41474560/28549024 bytes (5.2%2441216/28549024 bytes (8.6%3260416/28549024 bytes (11.44251648/28549024 bytes (14.95193728/28549024 bytes (18.26160384/28549024 bytes (21.67143424/28549024 bytes (25.08323072/28549024 bytes (29.29576448/28549024 bytes (33.510616832/28549024 bytes (37.2%11747328/28549024 bytes (41.1%12075008/28549024 bytes (42.3%13058048/28549024 bytes (45.7%14204928/28549024 bytes (49.8%15024128/28549024 bytes (52.6%16498688/28549024 bytes (57.8%17833984/28549024 bytes (62.5%19087360/28549024 bytes (66.9%20365312/28549024 bytes (71.3%21626880/28549024 bytes (75.8%22847488/28549024 bytes (80.0%24076288/28549024 bytes (84.3%25313280/28549024 bytes (88.7%26533888/28549024 bytes (92.9%27705344/28549024 bytes (97.0%28549024/28549024 bytes (100.0%) Done File saved as /root/.imageio/ffmpeg/ffmpeg.linux64. . def process_image(image): # NOTE: The output you return should be a color image (3 channel) for processing video below # TODO: put your pipeline here, # you should return the final output (image where lines are drawn on lanes) return lane_finding_pipeline(image) . Let&#39;s try the one with the solid white lane on the right first ... . white_output = &#39;test_videos_output/solidWhiteRight.mp4&#39; ## To speed up the testing process you may want to try your pipeline on a shorter subclip of the video ## To do so add .subclip(start_second,end_second) to the end of the line below ## Where start_second and end_second are integer values representing the start and end of the subclip ## You may also uncomment the following line for a subclip of the first 5 seconds ##clip1 = VideoFileClip(&quot;test_videos/solidWhiteRight.mp4&quot;).subclip(0,5) clip1 = VideoFileClip(&quot;test_videos/solidWhiteRight.mp4&quot;) white_clip = clip1.fl_image(process_image) #NOTE: this function expects color images!! %time white_clip.write_videofile(white_output, audio=False) . [MoviePy] &gt;&gt;&gt;&gt; Building video test_videos_output/solidWhiteRight.mp4 [MoviePy] Writing video test_videos_output/solidWhiteRight.mp4 100%|█████████▉| 221/222 [00:04&lt;00:00, 46.58it/s] [MoviePy] Done. [MoviePy] &gt;&gt;&gt;&gt; Video ready: test_videos_output/solidWhiteRight.mp4 CPU times: user 3.37 s, sys: 648 ms, total: 4.02 s Wall time: 5.38 s . Play the video inline, or if you prefer find the video in your filesystem (should be in the same directory) and play it in your video player of choice. . HTML(&quot;&quot;&quot; &lt;video width=&quot;960&quot; height=&quot;540&quot; controls&gt; &lt;source src=&quot;{0}&quot;&gt; &lt;/video&gt; &quot;&quot;&quot;.format(white_output)) . Improve the draw_lines() function . At this point, if you were successful with making the pipeline and tuning parameters, you probably have the Hough line segments drawn onto the road, but what about identifying the full extent of the lane and marking it clearly as in the example video (P1_example.mp4)? Think about defining a line to run the full length of the visible lane based on the line segments you identified with the Hough Transform. As mentioned previously, try to average and/or extrapolate the line segments you&#39;ve detected to map out the full extent of the lane lines. You can see an example of the result you&#39;re going for in the video &quot;P1_example.mp4&quot;. . Go back and modify your draw_lines function accordingly and try re-running your pipeline. The new output should draw a single, solid line over the left lane line and a single, solid line over the right lane line. The lines should start from the bottom of the image and extend out to the top of the region of interest. . Now for the one with the solid yellow lane on the left. This one&#39;s more tricky! . yellow_output = &#39;test_videos_output/solidYellowLeft.mp4&#39; ## To speed up the testing process you may want to try your pipeline on a shorter subclip of the video ## To do so add .subclip(start_second,end_second) to the end of the line below ## Where start_second and end_second are integer values representing the start and end of the subclip ## You may also uncomment the following line for a subclip of the first 5 seconds ##clip2 = VideoFileClip(&#39;test_videos/solidYellowLeft.mp4&#39;).subclip(0,5) clip2 = VideoFileClip(&#39;test_videos/solidYellowLeft.mp4&#39;) yellow_clip = clip2.fl_image(process_image) %time yellow_clip.write_videofile(yellow_output, audio=False) . [MoviePy] &gt;&gt;&gt;&gt; Building video test_videos_output/solidYellowLeft.mp4 [MoviePy] Writing video test_videos_output/solidYellowLeft.mp4 100%|█████████▉| 681/682 [00:15&lt;00:00, 45.24it/s] [MoviePy] Done. [MoviePy] &gt;&gt;&gt;&gt; Video ready: test_videos_output/solidYellowLeft.mp4 CPU times: user 10.8 s, sys: 2.07 s, total: 12.9 s Wall time: 15.6 s . HTML(&quot;&quot;&quot; &lt;video width=&quot;960&quot; height=&quot;540&quot; controls&gt; &lt;source src=&quot;{0}&quot;&gt; &lt;/video&gt; &quot;&quot;&quot;.format(yellow_output)) . Writeup and Submission . If you&#39;re satisfied with your video outputs, it&#39;s time to make the report writeup in a pdf or markdown file. Once you have this Ipython notebook ready along with the writeup, it&#39;s time to submit for review! Here is a link to the writeup template file. . Optional Challenge . Try your lane finding pipeline on the video below. Does it still work? Can you figure out a way to make it more robust? If you&#39;re up for the challenge, modify your pipeline so it works with this video and submit it along with the rest of your project! . challenge_output = &#39;test_videos_output/challenge.mp4&#39; ## To speed up the testing process you may want to try your pipeline on a shorter subclip of the video ## To do so add .subclip(start_second,end_second) to the end of the line below ## Where start_second and end_second are integer values representing the start and end of the subclip ## You may also uncomment the following line for a subclip of the first 5 seconds ##clip3 = VideoFileClip(&#39;test_videos/challenge.mp4&#39;).subclip(0,5) clip3 = VideoFileClip(&#39;test_videos/challenge.mp4&#39;) challenge_clip = clip3.fl_image(process_image) %time challenge_clip.write_videofile(challenge_output, audio=False) . [MoviePy] &gt;&gt;&gt;&gt; Building video test_videos_output/challenge.mp4 [MoviePy] Writing video test_videos_output/challenge.mp4 100%|██████████| 251/251 [00:10&lt;00:00, 24.67it/s] [MoviePy] Done. [MoviePy] &gt;&gt;&gt;&gt; Video ready: test_videos_output/challenge.mp4 CPU times: user 6.32 s, sys: 1.11 s, total: 7.43 s Wall time: 11.2 s . HTML(&quot;&quot;&quot; &lt;video width=&quot;960&quot; height=&quot;540&quot; controls&gt; &lt;source src=&quot;{0}&quot;&gt; &lt;/video&gt; &quot;&quot;&quot;.format(challenge_output)) .",
            "url": "https://akitsuyoshi.github.io/own_fastpages/jupyter/python/opencv/2020/11/17/My-First-Post.html",
            "relUrl": "/jupyter/python/opencv/2020/11/17/My-First-Post.html",
            "date": " • Nov 17, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://akitsuyoshi.github.io/own_fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://akitsuyoshi.github.io/own_fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://akitsuyoshi.github.io/own_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://akitsuyoshi.github.io/own_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}